# -*- mode: Perl -*-
# /=====================================================================\ #
# |  APEX_format                                                        | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Timothy Prescott <timothy.prescott.und@gmail.com>                   | #
# | License:     Creative Commons Attribution 4.0 Unported License      | #
# |    http://creativecommons.org/licenses/by/4.0/                      | #
# \=====================================================================/ #

package apex;
use strict;
use warnings;
use LaTeXML::Package;
use Data::Dumper;
use Scalar::Util qw(looks_like_number);

# fix a bug
RawTeX('\setlength{\marginparwidth}{150pt}');

DefMacro('\includecodegraphics{}','\includegraphics{#1}');

RequirePackage('ifluatex');

# same definition, but we need "Verbatim" to get it to work with _
DefMacro('\youtubeVideo Verbatim {}','\genVideo{#1}{https://youtu.be/#1}{#2}');

DefMacro('\genVideo [] Verbatim Verbatim {}',
	 '\\noindent Watch the video:\\\\'.
	 '\\href{#3#1}{#4 from \\nolinkurl{#3}}\\\\'.
	 '\\embedVideo{https://www.youtube.com/embed/#2?rel=0}\\\\');

DefMacro('\embedVideo Verbatim','\iframe{#1}{560}{355}');
DefConstructor('\iframe Verbatim {}{}',
           '<ltx:rawhtml>'.
           '<xhtml:iframe %&apex::getEmbeddedVideoAttr(#1,#2,#3) />'.
           '</ltx:rawhtml>');
sub getEmbeddedVideoAttr {
    return {
        src                  => $_[0],
        width                => $_[1],
        height               => $_[2],
        title                =>'Embedded video',
        frameborder          =>0,
        scrolling            =>'no',
        seamless             =>'seamless',
        allow                =>'fullscreen',
        allowfullscreen      =>'allowfullscreen',
        mozallowfullscreen   =>'mozallowfullscreen',
        webkitallowfullscreen=>'webkitallowfullscreen'
    };
}

#DefMacro('\lxIncludeJavascriptFile{}',
#	 '\AtBeginDocument{\lx@include@file{javascript}{#1}}');
#DefMacro('\lxIncludeCssFile[]{}',
#	 '\AtBeginDocument{\lx@include@file{css}[#1]{#2}}');

#DefConstructor('\lx@include@file{}[]{}',
#           '<ltx:resource type="text/#1" src="#3" ?#2(media="#2") />');
if ( 0 ) {
(
    sub {
        if ( $_[2] ) {
            RequireResource($_[3], {type=>"text/$_[1]",media=>$_[2]} );
        } else {
            RequireResource($_[3], {type=>"text/$_[1]"} );
        }
        return;
    }
);
}

open(CSS,'>','style-theorems.css') or Error('missing_file','style-theorems.css',undef,"Can't truncate file.");
close(CSS);

DefPrimitive('\makeStyles{}{}',sub {
    my $selector = '.ltx_theorem_'.UnTeX($_[1]);
    my $styles = &boxStyles(UnTeX($_[2]));
    open(CSS,'>>','style-theorems.css') or
        Error('missing_file','style-theorems.css',undef,"Can't append to file.");
    print CSS "\n$selector $styles\n";
    close(CSS);
    return;
});

if (0) {
DefConstructor('\makeStyles{}{}',
	       '<ltx:resource type="text/css">'.'#selector #styles'.'</ltx:resource>',
	       properties => sub {
    #my $stomach = shift;
    #    print STDERR "\nmakeStyles: array _\n";
    #    print STDERR Dumper(@_);
    #    print STDERR "\n:makeStyles array _\n";
        #my ($stomach, $whatsit) = @_;
    print STDERR "\nmakeStyles: _[1]\n";
        print STDERR UnTeX($_[1]);
    print STDERR "\nmakeStyles: _[2]\n";
        print STDERR Dumper($_[2]);
               return (
                   selector => '.ltx_theorem_'.UnTeX($_[1]),
                   styles => &boxStyles(UnTeX($_[2]))
                   );
	       }
    );
}

sub boxStyles {
    my $hue = shift;
    my $start = "hsl($hue,100%,97%)";
    my ($border,$middle,$stop);
    if ( $hue eq '60' ) {
	$border = "hsl($hue,90%,68%)";
	$middle = "hsl($hue,91%,90%)";
	$stop  = "hsl($hue,82%,83%)";
    } else {
	$border = "hsl($hue,18%,58%)";
	$middle = "hsl($hue,72%,92%)";
	$stop  = "hsl($hue,43%,86%)";
    }
    return "{
      padding: 1ex 1em;
      text-indent:0;
      border-width: 1px;
      border-style: solid;
      border-color: $border;
      color: black; /* if dark mode, color switches to washed out white */
      background-color: $middle; /* old browsers */
      background-image: -moz-linear-gradient(top,$start 0%,$stop); /* FF 3.6+ */
      background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start), color-stop(100%,$stop)); /* Chrome, Safari 4+ */
      background-image: -webkit-linear-gradient(top,$start 0%,$stop 100%); /* Chrome 10+, Safari 5.1+ */
      background-image: -o-linear-gradient(top,$start 0%,$stop 100%); /* Opera 11.10+ */
      background-image: -ms-linear-gradient(top,$start 0%,$stop 100%); /* IE 10+ */
      background-image: linear-gradient(to bottom,$start 0%,$stop 100%); /* W3C */
    }";
}

DefMacro('\apexchapter []{}{}',
	 '\chapter{#2}\label{#3}'
	 .'\ifx.#1.\else\addtocounter{section}{-1}\input{#1}\fi'
	 .'\section*{Chapter Introduction}'
	 .'\addcontentsline{toc}{section}{Chapter Introduction}');


DefConstructor('\myincludeasythree{}{} Semiverbatim',
    '<ltx:inline-block class="includedAsy">'.
    '<ltx:rawhtml>'.
    '<xhtml:iframe %&apex::getIframeAttr(#3)/>'.
    '</ltx:rawhtml><ltx:break/>'.
    '(<ltx:ref class="ltx_href" href="#3.html">fullscreen</ltx:ref>)'.
    '</ltx:inline-block>');

sub getIframeAttr {
    my $filename = $_[0];
    my %iframeAttr;
    $filename = ToString($filename).'.html';
    open(HTML,'<',$filename) or Error('missing_file',$filename,undef,"Can't find file.");
    $filename =~ s[figures/][];
    while(<HTML>) {
        if ( /iframe/ ) {
            s[iframe|<|>|/|"][]g;
            s/^ //;
            s[$filename][figures/$filename];
            chomp;
            %iframeAttr = split / +|=/;
            last;
        }
    }
    close(HTML);
    return \%iframeAttr;
}

DefMacro('\mnote []{}',
    '\marginpar{\begin{minipage}[c]{\marginparwidth}'.
    '\captionsetup{type=figure}\RaggedRight#2'.
    '\end{minipage}}');


DefMacro('\flushinner{}','{#1}');
DefMacro('\flushouter{}','{#1}');
DefMacro('\flushinnerequ{}','{#1}');
DefMacro('\flushouterequ{}','{#1}');

# some Macros we do need

DefMacro('\vv {}','\vec #1'); # provided by esvect
DefMacroI('\textcent',undef,"\x{00A2}");
DefMacro('\psBill'); # todo (found in package pst-fun)

# some macros we don't need
DefMacro('\testmargintop');
DefMacro('\testmarginbottom');
DefMacro('\packageinanswersection');
DefMacro('\tcbset {}');


if(0==1){
# have to keep it here because .sty has \noexpand, which gets written
# it appears to now be working.  I'll keep this for now
DefMacro('\writeToAnsFile {}',sub {
    #    print STDERR Dumper($_[1]);
    (Tokenize('\immediate\write\answrite{\answersForSection{'
	      . CounterValue('chapter')->toString . '}{'
	      . CounterValue('section')->toString . '}{'),
     $_[1],
     Tokenize('}}'));});
}

DefPrimitive('\showans Number',sub {
    my ($stomach,$port) = @_;
    $port = ToString($port);
    my $filename = LookupValue('output_file:' . $port);
    my $handle   = $filename . '_contents';
    my $contents = LookupValue($handle);
    print STDERR "\n\nCurrent $filename contents:\n$contents\n\n";
    return;
	     });

1;
