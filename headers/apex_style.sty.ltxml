# -*- mode: Perl -*-
# /=====================================================================\ #
# |  APEX_format                                                        | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Timothy Prescott <timothy.prescott.und@gmail.com>                   | #
# | License:     Creative Commons Attribution 4.0 Unported License      | #
# |    http://creativecommons.org/licenses/by/4.0/                      | #
# \=====================================================================/ #
use strict;
use warnings;
use LaTeXML::Package;
use Data::Dumper;

# fix some bugs by completely discarding the input
DefMacro('\matrix[]{}');
#DefEnvironment('{tikzpicture}','<ltx:p>tikzpicture</ltx:p>');
#DefEnvironment('{axis}','<ltx:p>axis</ltx:p>');
#DefEnvironment('{scope}','<ltx:p>scope</ltx:p>');
RequirePackage('comment');
#RawTeX('\excludecomment{tikzpicture}');
RawTeX('\excludecomment{axis}');
#RawTeX('\excludecomment{scope}');
#DefMacro('\addplot');
#DefMacro('\node');
#DefMacro('\draw');
#DefMacro('\filldraw');
#DefMacro('\closedcycle');
#DefMacro('\shade');
#DefMacro('\shadedraw');

# fix a bug
RawTeX('\setlength{\marginparwidth}{150pt}');

RequirePackage('ifluatex');

#DefMacro('\exvideo Verbatim','\bigbreak\noindent#1\bigbreak');

DefMacro('\embedVideo Verbatim','\iframe{#1}{560}{355}');

DefConstructor('\iframe Verbatim {}{}',
	       '<ltx:rawhtml>'.
	       '<ltx:block class="iframe" width="#2" height="#3">'.
	       '<ltx:ref class="iframe" href="#1" />'.
	       '</ltx:block>'.
	       '</ltx:rawhtml>');

#DefMacro('\coloredbox{}{}{}','#3'); # causes problems
DefMacro('\coloredbox{}{}'); # avoids problems?
# exhibit problem:
# \parbox{\linewidth} {\href{https://youtu.be/2CsQ_l1S2_Y}{has underscores}}

DefConstructor('\makeStyles{}{}',
	       '<ltx:resource type="text/css">'.
	       '#selector #styles'.
	       '</ltx:resource>',
	       properties => sub {
		   return (
		       selector => '.ltx_theorem_'.UnTeX($_[1]).'Env',
		       styles => &boxStyles(UnTeX($_[2]))
		       );
	       }
    );

sub boxStyles {
    my $hue = shift;
    my $start = "hsl($hue,100%,97%)";
    my ($border,$middle,$stop);
    if ( $hue eq '60' ) {
	$border = "hsl($hue,90%,68%)";
	$middle = "hsl($hue,91%,90%)";
	$stop  = "hsl($hue,82%,83%)";
    } else {
	$border = "hsl($hue,18%,58%)";
	$middle = "hsl($hue,72%,92%)";
	$stop  = "hsl($hue,43%,86%)";
    }
    return "{
      padding: 1ex 1em;
      text-indent:0;
      border-width: 1px;
      border-style: solid;
      border-color: $border;
      background-color: $middle; /* old browsers */
      background-image: -moz-linear-gradient(top,$start 0%,$stop); /* FF 3.6+ */
      background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start), color-stop(100%,$stop)); /* Chrome, Safari 4+ */
      background-image: -webkit-linear-gradient(top,$start 0%,$stop 100%); /* Chrome 10+, Safari 5.1+ */
      background-image: -o-linear-gradient(top,$start 0%,$stop 100%); /* Opera 11.10+ */
      background-image: -ms-linear-gradient(top,$start 0%,$stop 100%); /* IE 10+ */
      background-image: linear-gradient(to bottom,$start 0%,$stop 100%); /* W3C */
    }";
}

DefMacro('\examplestarred {}{}{}','\begin{exampleEnv}[#2]\label{#1}
\lxAddClass{inExample}
#3
\end{exampleEnv}');


DefMacro('\myincludegraphicsthree{}{} Semiverbatim',
	 '\myincludegraphics[#2]{#3_3D}');

DefMacro('\vv {}','\vec #1');

DefMacro('\flushinner{}','#1');
DefMacro('\flushouter{}','#1');
DefMacro('\flushinnerequ{}','#1');
DefMacro('\flushouterequ{}','#1');

# it'd be nice to have this.  instead, we have to enclose all fake figures in
# an lxfigure environment
#DefMacro('\captionsetup{}');
#DefMacro('\captionof{}{}','\caption{#2}');

# some Macros we do need
DefConstructor('\textcent','&cent;');
DefMacro('\lvert','\vert');
DefMacro('\rvert','\vert');
DefMacro('\lVert','\Vert');
DefMacro('\rVert','\Vert');
DefMacro('\psBill');
# should be in hyperref
DefMacro('\equationautorefname','Equation');
DefMacro('\pageautorefname','Page');
DefMacro('\autopageref{}','\hyperref[{#1}]{\pageautorefname\ \pageref*{#1}}');

# some macros we don't need
DefMacro('\drawexampleline');
DefMacro('\eoehere');
DefMacro('\longexample{}');
DefMacro('\testmargintop');
DefMacro('\testmarginbottom');

# some macros we don't need, but LaTeXML wants for plotting tikz pics
DefMacro('\x');
DefMacro('\y');


# fake counters to help with numbering the answers
NewCounter('fakechapter');
NewCounter('fakesection','fakechapter');
sub TheFakeSection {
    return CounterValue('fakechapter')->toString . '.' . CounterValue('fakesection')->toString;
}
sub TheFakeChapter {
    return CounterValue('fakechapter')->toString;
}

#DefMacro('\printexercises {}', sub {
#    if ( CounterValue('section')->toString eq '1' ) {
#	StepCounter('fakechapter');
#    }
#    StepCounter('fakesection');
#    my $label = TheFakeSection();
#    Invocation(T_CS('\printexercisesgeneric'),$_[1],"Exercises $label",$label);
#	 });

#DefMacro('\printexercisesreview {}', sub {
#    my $label = TheFakeChapter();
#    Invocation(T_CS('\printexercisesgeneric'),$_[1],"Chapter $label Review Exercises",$label);
#	 });

#DefMacro('\writeToAnsFile {}{}{}', sub {
#    my @ret;
#    if ( CounterValue('section')->toString eq '1' ) {
#	@ret = Tokenize('\immediate\write\answrite{}\write\answrite{\section*{Chapter '.TheFakeChapter().'}}');
#    }
#    push(@ret,
#	 Tokenize('\immediate\write\answrite{\subsection*{\hyperref[exer'),
#	 $_[3],
#	 Tokenize(']{'),
#	 $_[2],
#	 Tokenize('}}\label{sol'),
#	 $_[3],
#	 Tokenize('}\bigskip}\write\answrite{\lxAddClass{solutions}\printanswers{'),
#	 $_[1],
#	 Tokenize('}}'));
#    @ret;
#	 });

DefPrimitive('\showans Number',sub {
    my ($stomach,$port) = @_;
    $port = ToString($port);
    my $filename = LookupValue('output_file:' . $port);
    my $handle   = $filename . '_contents';
    my $contents = LookupValue($handle);
    print STDERR "Current $filename contents:\n$contents\n\n";
    return;
	     });

1;
